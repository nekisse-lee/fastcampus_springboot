JPA DevTools H2 Lombok
4가지 모듈을 추가해서 프로젝트 생성.

압축해제한다.

maven project import

lombok 관련된 설정을 한다. (intelliJ 설정 , 그전에 plugin설치되어 있어야 한다.)

- Java Application이 종료될 때 특별한 기능이 수행되고 싶을 경우?
1) java 문법으로 제공
2) Spring에서도 무언가 제공하지 않을까?
3) Bean이 생성되려면 생성자가 호출되야한다. 생성자가 호출된 이후에 해당 빈의 특정 메소드를
자동으로 실행하도록 하려면 어떻게 해야할까?

@PostConstruct, @PreDestroy

4) 모든 Bean이 생성되고 나서 어떤 동작을 하도록 하려면 어떻게 해야할까?
3,4 번을 이해하려면 Bean 생명주기 에 대한 공부를 하셔야한다.

- JPA, H2(JDBC Driver) 모듈을 추가하여 프로젝트 생성

- 자동으로 in-memory DataSource가 만들어진다.
- EntityManager가 Bean으로 등록된다.
- PlatformTransactionManager이 Bean으로 등록된다.
    @Transactional 이라는 애노테이션을 사용자는 이용한다.
- schmea.sql 을 실행해서 database 테이블을 자동으로 생성한다.
- data.sql(insert문) 을 실행해서 sample data를 자동으로 추가합니다.

https://www.baeldung.com/spring-boot-data-sql-and-schema-sql

5) 데이터베이스 프로그래밍의 발전 순서 (JAVA)

JDBC(java.sql) -> SQL Mapper (SQL 중심)
                  iBatis -> myBatis
                  Spring JDBC

               -> ORM
                  Hibernate(구현) -> JPA(표준)  ----> Data JPA (Spring)
                                    EntityManager (영속석관리자.)
                                    트랜잭션단위마다 영속성컨텍스트가 생성 삭제
                                    트랜잭션이 끝날 때 지연쓰기(sql을 압축실행)

Data JPA 를 사용하면 JpaRepository 인터페이를 상속받은 interface를 만든다.
해당 인터페이스를 구현하고 있는 객체는 자동으로 Bean으로 등록된다.

JPA에서는 SQL을 보통 사용하지 않고 JPQL을 사용한다.
이유는 SQL은 특정 DB에 종속인데, JPQL은 그렇지 않다.
Hibernate의 경우, 사용하는 DB에 맞는 Dialect를 설정한다.

JPQL은 보통 @Query("SELECT b FROM Board b WHERE id = :id")
이런식으로 쓴다. :id부분은 바인딩하여 사용된다.
문제는 Dynamic JPQL의 경우이다.
예를 들어 WHERE id = :id and name = :name 또는
WHERE id = :id and title = :title 과 같이 where절 조건이 아예
경우 따라 바뀌는 경우가 있다.

JpaRepository 를 상속받는 BoardRepository를 만든다.
Dynamic JPQL기능이 필요한 메소드를 가지는 BoardRepositoryCustom인터페이스를 만든다.
BoardRepositoryCustom을 구현하고 있는 BoardRepositoryImpl클래스를 작성.
        - BoardRepositoryImpl에 EntityManager를 주입하여 동적 JPQL을 사용
        - QuerydslRepositorySupport를 상속받는 BoardRepositoryImpl을 만든다.
          QueryDSL을 이용한다. maven이나 gradle에 plugin을 설정해야한다.
BoardRepository는 BoardRepositoryCustom인터페이스를 상속받는다.


- Entity를 정의를 할 수 있어야 한다.
- Entity와 Entity간의 관계를 설정할 수 있어야 한다.
- Entity와 Entity의 관계를 보고 자동 생성되는 Table에 유추할 수 있어야 한다.
(스타트업???)
- Table을 보고 관련된 Entity클래스들을 작성할 수 있어야 한다. (현업)

DB 프로그래밍에서 가장 성능을 떨어지게 만드는 원인은 잘못된 Select문의 실행이다.

Board --- BoardFile
    1     *

목록을 출력하고 싶다. 1+N 문제가 발생.
1) SELECT b FROM Board b
2) b.getBoardFiles() // lazy 로딩. SELECT bf FROM BoardFile bf
                                  WHERE bf.fileId = :fileId
    해당 리스트에서 하나씩 꺼내서 name을 출력
Board.title , BoardFile.name 을 출력하고 싶다.

이 문제를 해결하려면 JPQL에서는 fetch join을 사용한다.
이때 엔티티가 중복되서 가지고 올 수 있다. JPQL에 distinct 를 사용하거나
혹은 Set자료 구조를 사용한다. Set으로 선언하지 않으면 문제가 해결 안되는 경우도 있다.

Board (table)    BoardFile (table)
1                1   1(fk)
2                2   1(fk)
3                3   2(fk)
4                4   2(fk)
                 5   3(fk)

숙제

자동으로 테이블이 생성될 때 문자열의 길이를 설정하는 방법.
mysql의 경우 대용량 문자열은 text 타입을 사용하는데. 타입을 선언하는 방법.
본인이 다른 db를 사용한다면, 그 db에 맞는 방법을 조사 정리.

https://github.com/urstory/stickershop


spring data jpa 문서

https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods

https://docs.spring.io/spring-data/jpa/docs/current/reference/html/\


pom.xml 파일 수정 (querydsl 관련 라이브러리 추가, querydsl plugin 추가)

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>examples.boot</groupId>
	<artifactId>jpaexam</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>jpaexam</name>
	<description>Demo project for Spring Boot</description>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.0.4.RELEASE</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<java.version>1.8</java.version>
	</properties>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.projectlombok</groupId>
			<artifactId>lombok</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- querydsl -->
		<dependency>
			<groupId>com.querydsl</groupId>
			<artifactId>querydsl-jpa</artifactId>
			<version>4.1.4</version>
		</dependency>

		<dependency>
			<groupId>com.querydsl</groupId>
			<artifactId>querydsl-apt</artifactId>
			<version>4.1.4</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- querydsl plugin, mvn build -->
			<plugin>
				<groupId>com.mysema.maven</groupId>
				<artifactId>apt-maven-plugin</artifactId>
				<version>1.1.3</version>
				<executions>
					<execution>
						<goals>
							<goal>process</goal>
						</goals>
						<configuration>
							<outputDirectory>target/generated-sources/java</outputDirectory>
							<processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>


</project>

-----------------------

mvn build나 mvn package 를 실행하여 QClass를 생성한다.

